"use strict";dealeron.runtime.define(["system/logManager","system/linq"],(e,t)=>{let s=e.getLogger("Async Ops");const r={DEFERRED:0,PENDING:1,DONE:2};return class l{constructor(e){this._error=null,this._result=null,this._defferredAction=e,this._state=r.DEFERRED,this._observers=[]}then(e){this._state==r.DONE?this._execAsync(()=>e(this._error,this._result)):this._state==r.DEFERRED?(this._observers.push(e),this.execute()):this._observers.push(e)}execute(){this._state===r.DEFERRED&&(this._state=r.PENDING,this._execAsync(()=>this._defferredAction(e=>this._resolve(e),e=>this._reject(e))))}static await(e){return new l(e)}static awaitAll(i){i=t.Enumerable.from(i).toArray();let h=[];return new l((s,r)=>{for(var e=(e,t)=>{e&&r(e),h.push(t),h.length===i.length&&s(h)},t=0;t<i.length;t++)i[t].then(e)})}_resolve(e){this._state===r.DONE?s.warn("Multiple resolutions to a promise were attempted. These will be ignored."):(this._state=r.DONE,this._result=e,this._publishResults())}_reject(e){this._state===r.DONE?s.warn("Multiple resolutions to a promise were attempted. These will be ignored."):(this._state=r.DONE,this._error=e,this._publishResults())}_execAsync(e){window.setImmediate?window.setImmediate(e):window.setTimeout(e,0)}_publishResults(){t.Enumerable.from(this._observers).forEach(e=>this._execAsync(()=>e(this._error,this._result)))}}});